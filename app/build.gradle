import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//Sophix热修复插件
apply plugin: 'com.aliyun.ams.emas-services'
//AOP
apply plugin: 'com.hujiang.android-aspectjx'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.flutterandroid"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.1"
        ndk {
            //选择要添加的对应cpu类型的.so库。
            //热修复支持五种
            abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    //签名文件配置
    signingConfigs {
        release {
            keyAlias 'flutterandroid'
            keyPassword '123456'
            storeFile file('flutterandroid.keystore')
            storePassword '123456'
        }
        debug {
            keyAlias 'flutterandroid'
            keyPassword '123456'
            storeFile file('flutterandroid.jks')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            //签名配置
            signingConfig signingConfigs.release
        }
        debug {
            //签名配置
            signingConfig signingConfigs.debug
        }
    }

    /**
     * Execution failed for task ':app:mergeExtDexRelease'.
     * > Could not resolve all files for configuration ':app:releaseRuntimeClasspath'.
     *    > Failed to transform flutter_embedding_release-1.0.0-c4229bfbbae455ad69c967be19aee3fadd6486e1.jar (io.flutter:flutter_embedding_release:1.0.0-c4229bfbbae455ad69c967be19aee3fadd6486e1) to match attributes {artifactType=android-dex, dexing-enable-desugaring=false, dexing-incremental-desugaring-v2=false, dexing-is-debuggable=false, dexing-min-sdk=21, org.gradle.category=library, org.gradle.libraryelements=jar, org.gradle.status=release, org.gradle.usage=java-runtime}.
     *       > Execution failed for DexingNoClasspathTransform: /Users/fqxyi/.gradle/caches/transforms-2/files-2.1/8e27d6a58b063d566351e134ffe465b9/jetified-flutter_embedding_release-1.0.0-c4229bfbbae455ad69c967be19aee3fadd6486e1.jar.
     *          > Error while dexing.
     *            The dependency contains Java 8 bytecode. Please enable desugaring by adding the following to build.gradle
     *            android {
     *                compileOptions {
     *                    sourceCompatibility 1.8
     *                    targetCompatibility 1.8
     *                }
     *            }
     *            See https://developer.android.com/studio/write/java8-support.html for details. Alternatively, increase the minSdkVersion to 24 or above.
     */
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    lintOptions {
        /**
         * TODO fqxyi 暂时以这种方式解决这个异常
         * Execution failed for task ':app:lintVitalRelease'.
         * > Could not resolve all artifacts for configuration ':app:debugRuntimeClasspath'.
         *    > Failed to transform libs.jar to match attributes {artifactType=processed-jar, org.gradle.libraryelements=jar, org.gradle.usage=java-runtime}.
         *       > Execution failed for JetifyTransform: /Users/fqxyi/Desktop/workspace/flutter/flutter_module/.android/Flutter/build/intermediates/flutter/debug/libs.jar.
         *          > Transform's input file does not exist: /Users/fqxyi/Desktop/workspace/flutter/flutter_module/.android/Flutter/build/intermediates/flutter/debug/libs.jar. (See https://issuetracker.google.com/issues/158753935)
         */
        checkReleaseBuilds false
    }
}

repositories {
    //Sophix热修复 https://help.aliyun.com/document_detail/61082.html
    maven {
        url "http://maven.aliyun.com/nexus/content/repositories/releases"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    //flutter依赖，flutter调试模式使用本地依赖，否则远程依赖
    if (project.hasProperty('isFlutterMode') && project.getProperty('isFlutterMode')) {
        implementation project(':flutter')
        implementation project(':flutter_boost')
        implementation project(':flutter_bmfbase')
    } else {
        implementation 'com.example.flutter:flutter_module:1.0.0-SNAPSHOT'
    }
    //Sophix热修复
    implementation 'com.aliyun.ams:alicloud-android-hotfix:3.2.14'
    //AOP
    implementation project(":aop")
}

aspectjx {
    //指定只对含有关键字'universal-image-loader', 'AspectJX-Demo/library'的库进行织入扫描，忽略其他库，提升编译效率
//    includeJarFilter 'universal-image-loader', 'AspectJX-Demo/library'
//    excludeJarFilter '.jar'
//    ajcArgs '-Xlint:warning'
}

//AOP日志输出
final def log = project.logger
final def variants = project.android.applicationVariants //libraryVariants
//在构建工程时，执行编织
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return
    }

    TaskProvider<JavaCompile> provider =  variant.javaCompileProvider
    JavaCompile javaCompile = provider.get()
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}